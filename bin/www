#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('roomsapp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/************************************************************************
  Socket.io area
*************************************************************************/

var io = require('socket.io')(server);
var rndStr = require('randomstring');
var rooms = [];

io.on('connection', function(socket){

    socket.on('createRoom', function(msg){
        Room.delete(socket);

        var roomID = rndStr.generate({
            length: 5,
            charset: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        });
        rooms.push({
            id: roomID,
            userId: socket.id,
            name: msg.name || '!specified',
            description: msg.description || '!specified'
        });
        
        //join to room
        socket.join(roomID);

        console.log('Room has been created with ID: %s', roomID);
        console.log('Client ID: %s', socket.id);
        console.log('Available rooms %s', rooms);
    
        socket.broadcast.emit('allVideos', rooms);

    });

    // sned videos by request
    socket.on('loadVideos', function(){
        io.to(socket.id).emit('allVideos', rooms);
    });

    socket.on('roomId', function(id){
        console.log('room id is here %s', id)
        //give access to that room
        socket.join(id);
        //send back
        io.sockets.in(id).emit('roomMsg', 'success');
    });


    socket.on('disconnect', function(){
        Room.delete(socket);
        console.log('disconnect')
        console.log('Room IDs: %s', rooms)
    });

});

var Room = {
    delete: function(socket){
        rooms.forEach(function(room, index){
            if(room.userId == socket.id){
                rooms.splice(index, 1);
            }
        });
    }
};
/************************************************************************
  end Socket.io area
*************************************************************************/

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
